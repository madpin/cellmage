name: Main
permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

env:
  # Change this to invalidate existing cache.
  CACHE_PREFIX: v1
  PYTHONPATH: ./

jobs:
  checks:
    name: Python ${{ matrix.python }} - ${{ matrix.task.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python: ["3.9", "3.10", "3.11"]
        task:
          - name: Test
            run: |
              pytest -v --color=yes tests/

        include:
          - python: "3.10"
            task:
              name: Lint
              run: ruff --config pyproject.toml check .

          # - python: "3.10"
          #   task:
          #     name: Type check
          #     run: mypy .

          - python: "3.10"
            task:
              name: Build
              run: |
                python -m build

          - python: "3.10"
            task:
              name: Style
              run: |
                isort --check .
                black --config pyproject.toml --check .

          - python: "3.10"
            task:
              name: Docs
              run: cd docs && make SPHINXOPTS="-W --keep-going" html

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python environment
        uses: ./.github/actions/setup-venv
        with:
          python-version: ${{ matrix.python }}
          cache-prefix: ${{ env.CACHE_PREFIX }}
          dependencies: "dev,all"

      # - name: Restore mypy cache
      #   if: matrix.task.name == 'Type check'
      #   uses: actions/cache@v4
      #   with:
      #     path: .mypy_cache
      #     key: mypy-${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('*requirements.txt') }}-${{ github.ref }}-${{ github.sha }}
      #     restore-keys: |
      #       mypy-${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('*requirements.txt') }}-${{ github.ref }}
      #       mypy-${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('*requirements.txt') }}

      - name: Verify environment before task
        if: ${{ matrix.task.name == 'Test' }}
        run: |
          . .venv/bin/activate
          # Check for langchain modules - critical for tests
          python -c "import sys, os; print(f'Python {sys.version}'); print(f'PYTHONPATH: {os.environ.get(\"PYTHONPATH\", \"Not set\")}'); print('Working directory:', os.getcwd())"
          python -c "import langchain_core; print('langchain_core version:', langchain_core.__version__)" || echo "WARNING: langchain_core not installed properly"

      - name: ${{ matrix.task.name }}
        run: |
          . .venv/bin/activate
          ${{ matrix.task.run }}

      - name: Debug on test failure
        if: ${{ failure() && matrix.task.name == 'Test' }}
        run: |
          . .venv/bin/activate
          echo "==== Installed packages ===="
          pip list
          echo "==== Python path ===="
          python -c "import sys; print(sys.path)"
          echo "==== Import test ===="
          python -c "import langchain_core" || echo "Failed to import langchain_core"

      - name: Upload package distribution files
        if: matrix.task.name == 'Build'
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist
          retention-days: 7

      - name: Clean up
        if: always()
        run: |
          . .venv/bin/activate
          pip uninstall -y cellmage

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [checks]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install requirements
        run: |
          pip install --upgrade pip setuptools wheel build twine
          pip install -e ".[dev,all]"

      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download package distribution files
        uses: actions/download-artifact@v5
        with:
          name: package
          path: dist

      - name: Generate release notes
        run: |
          python scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md

      - name: Verify package files
        run: |
          echo "Package files to be uploaded:"
          ls -la dist/
          twine check dist/*

      - name: Publish package to PyPI
        run: |
          twine upload -u '${{ secrets.PYPI_USERNAME }}' -p '${{ secrets.PYPI_PASSWORD }}' dist/*

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, 'rc') }}
          files: |
            dist/*
